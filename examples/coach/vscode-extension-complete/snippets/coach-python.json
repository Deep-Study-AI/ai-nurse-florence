{
  "Coach Wizard": {
    "prefix": "cwizard",
    "body": [
      "from coach.base_wizard import BaseWizard",
      "from coach.types import WizardResult, Severity",
      "",
      "class ${1:Example}Wizard(BaseWizard):",
      "    \"\"\"${2:Description of wizard}\"\"\"",
      "    ",
      "    def __init__(self):",
      "        super().__init__(",
      "            name=\"${1:Example}Wizard\",",
      "            description=\"${2:Description}\",",
      "            version=\"1.0.0\"",
      "        )",
      "    ",
      "    def analyze(self, code: str, context: dict) -> WizardResult:",
      "        \"\"\"Analyze the code and return results.\"\"\"",
      "        # TODO: Implement analysis logic",
      "        ",
      "        return WizardResult(",
      "            wizard=self.name,",
      "            diagnosis=\"${3:Diagnosis}\",",
      "            severity=Severity.${4|INFO,WARNING,ERROR|},",
      "            recommendations=[",
      "                \"${5:Recommendation}\"",
      "            ],",
      "            code_examples=[],",
      "            references=[]",
      "        )",
      "        $0"
    ],
    "description": "Create a new Coach wizard"
  },
  "WizardResult": {
    "prefix": "cwresult",
    "body": [
      "WizardResult(",
      "    wizard=\"${1:WizardName}\",",
      "    diagnosis=\"${2:Diagnosis}\",",
      "    severity=Severity.${3|INFO,WARNING,ERROR|},",
      "    recommendations=[",
      "        \"${4:Recommendation}\"",
      "    ],",
      "    code_examples=[],",
      "    references=[]",
      ")$0"
    ],
    "description": "Create a WizardResult"
  },
  "CodeExample": {
    "prefix": "cwexample",
    "body": [
      "CodeExample(",
      "    before=\"\"\"",
      "${1:Before code}",
      "\"\"\",",
      "    after=\"\"\"",
      "${2:After code}",
      "\"\"\",",
      "    explanation=\"${3:Explanation}\"",
      ")$0"
    ],
    "description": "Create a CodeExample"
  },
  "Wizard Test": {
    "prefix": "cwtest",
    "body": [
      "import pytest",
      "from wizards.${1:wizard_module} import ${2:WizardClass}",
      "",
      "def test_${3:wizard_name}_basic():",
      "    \"\"\"Test basic functionality of ${2:WizardClass}.\"\"\"",
      "    wizard = ${2:WizardClass}()",
      "    ",
      "    code = \"\"\"",
      "    ${4:Test code}",
      "    \"\"\"",
      "    ",
      "    result = wizard.analyze(code, {})",
      "    ",
      "    assert result.wizard == \"${2:WizardClass}\"",
      "    assert result.diagnosis is not None",
      "    $0"
    ],
    "description": "Create a wizard test"
  },
  "LangChain Wizard": {
    "prefix": "cwlangchain",
    "body": [
      "from coach.base_wizard import BaseWizard",
      "from coach.types import WizardResult, Severity",
      "from langchain.chat_models import ChatOpenAI",
      "from langchain.prompts import ChatPromptTemplate",
      "",
      "class ${1:Example}Wizard(BaseWizard):",
      "    \"\"\"${2:Description}\"\"\"",
      "    ",
      "    def __init__(self, api_key: str):",
      "        super().__init__(",
      "            name=\"${1:Example}Wizard\",",
      "            description=\"${2:Description}\",",
      "            version=\"1.0.0\"",
      "        )",
      "        self.llm = ChatOpenAI(api_key=api_key, model=\"gpt-4\")",
      "        self.prompt = ChatPromptTemplate.from_messages([",
      "            (\"system\", \"${3:System prompt}\"),",
      "            (\"user\", \"Analyze this code: {code}\")",
      "        ])",
      "    ",
      "    def analyze(self, code: str, context: dict) -> WizardResult:",
      "        \"\"\"Analyze using LLM.\"\"\"",
      "        chain = self.prompt | self.llm",
      "        response = chain.invoke({\"code\": code})",
      "        ",
      "        return WizardResult(",
      "            wizard=self.name,",
      "            diagnosis=response.content,",
      "            severity=Severity.INFO,",
      "            recommendations=[],",
      "            code_examples=[],",
      "            references=[]",
      "        )",
      "        $0"
    ],
    "description": "Create a LangChain-powered wizard"
  }
}
